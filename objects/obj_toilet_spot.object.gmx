<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_toilet_spot</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_node</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set variables
occupied = 0;
angle = 0;
reachable = 1;
activated = 1;

depth = 1000;

// tutorial
if MESSAGE == 6 {
    scr_UI_dismiss_message();
}

// create front spot
if obj_controller.itemrot == 0 {
    with (instance_create(x+32, y, obj_toilet_front)) {
        angle = 270;
        toiletspotid = other.id;
    }
}
else if obj_controller.itemrot == 90 {
    with (instance_create(x, y-32, obj_toilet_front)) {
        angle = 180;
        toiletspotid = other.id;
    }
}
else if obj_controller.itemrot == 180 {
    with (instance_create(x-32, y, obj_toilet_front)) {
        angle = 0;
        toiletspotid = other.id;
    }
}
else if obj_controller.itemrot == 270 {
    with (instance_create(x, y+32, obj_toilet_front)) {
        angle = 90;
        toiletspotid = other.id;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy front spot
var nbspots = instance_number(obj_toilet_front), spot, lst = ds_queue_create();

// loop through all seats and check if seat belongs to table
for (i = 0; i &lt; nbspots; i++) {
    spot = instance_find(obj_toilet_front, i);
    if spot.toiletspotid == self.id {
        // if so, add it to the list
        ds_queue_enqueue(lst, spot);
    }
}

// delete and dequeue seats one by one
repeat ds_queue_size(lst) {
    with (ds_queue_head(lst)) { instance_destroy(); }
    ds_queue_dequeue(lst);
}

ds_queue_destroy(lst);

scr_spots("update", obj_toilet_front);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// if not reachable

if !reachable {
    draw_sprite(spr_unreachable,0, x, y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw

draw_self();
if obj_controller.showdebug {
    draw_text(x+12, y+20, string(occupied));
    draw_text(x+12, y+40, string(angle));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
