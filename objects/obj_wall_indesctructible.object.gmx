<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_wall</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_all_walls</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// depth
depth = -y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change sprite according to neighbors

centerx = x+16;
centery = y+16;
image_speed = 0;
image_angle = 0;

//Name of the object to detect
var obj = obj_wall;
var obj1 = obj_wall_indesctructible;
var i = 0


// Calcul du score
if (position_meeting(centerx, centery-32, obj) || position_meeting(centerx, centery-32, obj1)) { // up
    i += 11;
}
if (position_meeting(centerx+32, centery, obj) || position_meeting(centerx+32, centery, obj1)) { // right
    i += 12;
}
if (position_meeting(centerx, centery+32, obj) || position_meeting(centerx, centery+32, obj1)) { // down
    i += 13;
} 
if (position_meeting(centerx-32, centery, obj) || position_meeting(centerx-32, centery, obj1)) { // left
    i += 15;
}

switch (i)
{
    case 12: image_index = 10 ; break; // right
    case 15: image_index = 11 ; break; // left
    case 27: image_index = 0 ; break;
    
    case 11: image_index = 9 ; break; // up
    case 13: image_index = 12 ; break; // down
    case 24: image_index = 1 ; break;
    
    case 51: image_index = 2 ; break; // all
    
    case 28: image_index = 3 ; break; //left + down
    case 25: image_index = 4 ; break; //right + down
    case 23: image_index = 5 ; break; //right + up
    case 26: image_index = 6 ; break; //left + up
    
    case 38: image_index = 0 ; break; //triangle up
    case 36: image_index = 7 ; break; //triangle right
    case 40: image_index = 2 ; break; //triangle down
    case 39: image_index = 8 ; break; //triangle left
    
    default: image_index = 0 ; break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Windows

// LEVEL 1
if obj_controller.currentlevel == "level_1" {
    if x=448 &amp;&amp; y == 640 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=480 &amp;&amp; y == 640 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
    if x=256 &amp;&amp; y == 256 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=288 &amp;&amp; y == 256 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
}

// LEVEL 2
if obj_controller.currentlevel == "level_2" {
    if x=416 &amp;&amp; y == 736 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=448 &amp;&amp; y == 736 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
    if x=480 &amp;&amp; y == 288 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=512 &amp;&amp; y == 288 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
}

// LEVEL 3
if obj_controller.currentlevel == "level_3" {
    if x=448 &amp;&amp; y == 832 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=480 &amp;&amp; y == 832 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
     
    if x=192 &amp;&amp; y == 288 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=224 &amp;&amp; y == 288 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
     
    if x=480 &amp;&amp; y == 64 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=512 &amp;&amp; y == 64 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
     
    if x=800 &amp;&amp; y == 832 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=832 &amp;&amp; y == 832 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
}

// LEVEL 4
if obj_controller.currentlevel == "level_4" {
    if x=896 &amp;&amp; y == 576 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=928 &amp;&amp; y == 576 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
    if x=1184 &amp;&amp; y == 576 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }
    if x=1216 &amp;&amp; y == 576 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
    if x=736 &amp;&amp; y == 832 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }    
    if x=768 &amp;&amp; y == 832 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
    if x=320 &amp;&amp; y == 832 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }    
    if x=352 &amp;&amp; y == 832 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
    if x=288 &amp;&amp; y == 64 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }    
    if x=320 &amp;&amp; y == 64 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
    if x=736 &amp;&amp; y == 64 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }    
    if x=768 &amp;&amp; y == 64 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
    
    if x=1120 &amp;&amp; y == 64 {
        image_index = 13;
        sprite_set_offset(self, 0, -16);
    }    
    if x=1152 &amp;&amp; y == 64 {
        image_index = 14;
        sprite_set_offset(self, 0, -16);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
