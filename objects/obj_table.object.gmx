<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_parent</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_furniture</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// item creation

var myID = id;

scr_money_trade(x, y, -price, name);

image_speed = 0;
depth = -y;

// assign sprite calculated in controller
sprite_index = obj_controller.sprite;

// record width/height and wcells/hcells
var w = obj_controller.sprwidth;
var h = obj_controller.sprheight;
var wcells = w div 32;
var hcells = h div 32;


// create SEAT spots and record direction
if w &gt; h {
    for (i=0; i &lt; wcells; i++) {
        with (instance_create(x+(32*i), y-32, obj_seat)) {
            angle = 270;
            tableID = myID;
        }
        with (instance_create(x+(32*i), y+h, obj_seat)) {
            angle = 90;  
            tableID = myID;        
        }
        capacity = w div 32 * 2;
    }
} else if h &gt; w {
    for (i=0; i &lt; hcells; i++) {
        with (instance_create(x-32, y+(32*i), obj_seat)) {
            angle = 0;  
            tableID = myID;          
        }
        with (instance_create(x+w, y+(32*i), obj_seat)) {
            angle = 180;   
            tableID = myID;         
        }
        capacity = h div 32 * 2;
    }
    // if square table
} else {
    if obj_controller.itemrot == 0 || obj_controller.itemrot == 180 {
        for (i=0; i &lt; hcells; i++) {
            with (instance_create(x+(32*i), y-32, obj_seat)) {
                angle = 270;
                tableID = myID;
            }
            with (instance_create(x+(32*i), y+h, obj_seat)) {
                angle = 90;  
                tableID = myID;        
            }
        }
    }
            
    if obj_controller.itemrot == 90 || obj_controller.itemrot == 270 {
        for (i=0; i &lt; wcells; i++) {
            with (instance_create(x-32, y+(32*i), obj_seat)) {
                angle = 0;  
                tableID = myID;          
            }
            with (instance_create(x+w, y+(32*i), obj_seat)) {
                angle = 180;  
                tableID = myID;          
            }
        }      
    }  
    capacity = h div 32 * 2;
}

// create SERVER spots and record direction
if w &lt; h {
    for (i=0; i &lt; wcells; i++) {
        with (instance_create(x+(32*i), y-32, obj_server_table_spot)) {
            angle = 270;
            tableID = myID;
        }
        with (instance_create(x+(32*i), y+h, obj_server_table_spot)) {
            angle = 90;  
            tableID = myID;        
        }
        capacity = w div 32 * 2;
    }
} else if h &lt; w {
    for (i=0; i &lt; hcells; i++) {
        with (instance_create(x-32, y+(32*i), obj_server_table_spot)) {
            angle = 0;  
            tableID = myID;          
        }
        with (instance_create(x+w, y+(32*i), obj_server_table_spot)) {
            angle = 180;   
            tableID = myID;         
        }
        capacity = h div 32 * 2;
    }
    // if square table
} else {
    if obj_controller.itemrot == 90 || obj_controller.itemrot == 270 {
        for (i=0; i &lt; hcells; i++) {
            with (instance_create(x+(32*i), y-32, obj_server_table_spot)) {
                angle = 270;
                tableID = myID;
            }
            with (instance_create(x+(32*i), y+h, obj_server_table_spot)) {
                angle = 90;  
                tableID = myID;        
            }
        }
    }
            
    if obj_controller.itemrot == 0 || obj_controller.itemrot == 180 {
        for (i=0; i &lt; wcells; i++) {
            with (instance_create(x-32, y+(32*i), obj_server_table_spot)) {
                angle = 0;  
                tableID = myID;          
            }
            with (instance_create(x+w, y+(32*i), obj_server_table_spot)) {
                angle = 180;  
                tableID = myID;          
            }
        }      
    }  
}

scr_wealth_calculation();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy seat spots
var nbspots = instance_number(obj_seat), spot, lst = ds_queue_create();

// loop through all seats and check if seat belongs to table
for (i = 0; i &lt; nbspots; i++) {
    spot = instance_find(obj_seat, i);
    if spot.tableID == self.id {
        // if so, add it to the list
        ds_queue_enqueue(lst, spot);
    }
}

// delete and dequeue seats one by one
repeat ds_queue_size(lst) {
    with (ds_queue_head(lst)) { instance_destroy(); }
    ds_queue_dequeue(lst);
}

ds_queue_destroy(lst);

scr_spots("update", obj_seat);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy server spots
var nbspots = instance_number(obj_server_table_spot), spot, lst = ds_queue_create();

// loop through all spots and check if seat belongs to table
for (i = 0; i &lt; nbspots; i++) {
    spot = instance_find(obj_server_table_spot, i);
    if spot.tableID == self.id {
        // if so, add it to the list
        ds_queue_enqueue(lst, spot);
    }
}

// delete and dequeue spots one by one
repeat ds_queue_size(lst) {
    with (ds_queue_head(lst)) { instance_destroy(); }
    ds_queue_dequeue(lst);
}

ds_queue_destroy(lst);

scr_spots("update", obj_server_table_spot);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Money trade

scr_money_trade(x, y, price/2, string(name + " sold"));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// calculate wealth

obj_controller.alarm[3] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw

draw_self();

if obj_controller.showdebug {
    draw_text(x, y, "cap: " + string(capacity));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
