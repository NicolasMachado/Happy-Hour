<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_server_1_r</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_characters</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Server INIT
event_inherited();

// Salary
basesalary = 8.50;
salary = basesalary*(obj_controller.wealth/WEALTHDIV);
salarycycle = 30; // in seconds
scr_money_trade(x, y-70, -salary, "New hire");
alarm[2] = salarycycle*room_speed;

scr_get_random_name();

// sprite archetype + color
randcol = irandom_range(1,1);
mysprite = "spr_server_" + string(randcol);

// set variables
iam = "server";
customertoserve = "";
emotion = "noone";
moving = false;
pause = false;
carrying = 0; // number of drinks currently carried
cancarry = 6;
mycurrentspot = "";
listtoserve = ds_priority_create();
intention = "bar";
ii = 0;
experience = 0;
level = 0;
fired = 0;
mypathposition = 0;

goal = "";

// set BASE speed
var basespd = 3;

// random speed + or - 20% of basespeed
var randfactor = random_range(-20,20);
var randfactor1 = random_range(-20,20);
spd = basespd + ((basespd * randfactor)/100);
wit = 1 + (randfactor1/100);
imgspd = spd/15;
image_speed = imgspd;

scr_move_to_server_bar_spot();

// tutorial
if MESSAGE == 7 {
    scr_UI_dismiss_message();
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remove window view

if obj_controller.selected == self.id {
    obj_controller.selected = "";
    view_visible[1] = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reputation + avgwaitingtime calculation

obj_controller.reputation -= 10;

// limits
if obj_controller.reputation &gt; 100 {
    obj_controller.reputation = 99.9;
} else if obj_controller.reputation &lt;= 3 {
    obj_controller.reputation = 3;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy list

ds_priority_destroy(listtoserve);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Salary
if !fired {
    scr_money_trade(x, y-70, -salary, "Salary");
    alarm[2] = salarycycle*room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset emotion
emotion = "noone";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decide next

scr_action_decide_next_server();
pause = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Natural states decay and needs

/// Execute script
script_execute(state);
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// After reaching goal, decide next

// Round up positions of goal and current pos (buggy otherwise)
if (goal != "" &amp;&amp; instance_exists(goal) &amp;&amp; goal.activated) {
    goalx = round(goal.x);
    goaly = round(goal.y);
    var posx = round(x);
    var posy = round(y);
    
    // if destination reached   
    if (posx == goalx+16 &amp;&amp; posy == goaly+16 &amp;&amp; moving &amp;&amp; alarm[0] == -1){
        path_end();
        moving = false;
        if goal == mycurrentspot { direction = goal.angle; }
        scr_action_pause(50, "Reached my destination");
    }
} else {
    if moving {
        path_end();
    }
    if !pause {
        if (instance_exists(mycurrentspot) &amp;&amp; position_meeting(x, y, mycurrentspot)) {
            mycurrentspot.occupied = 0;
            mycurrentspot = "";
        }
        scr_action_pause(50, "I'm gonna wander I think.");
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprite change according to direction

if (direction &gt; 125 &amp;&amp; direction &lt; 270) {
    sprdir = "_r";
    image_xscale = -1;
} else if (direction &lt; 50 || direction &gt;= 270) {   
    sprdir = "_r"; 
    image_xscale = 1;
} else if (direction &gt;= 50 &amp;&amp; direction &lt;= 125) {
    sprdir = "_u" 
} 

// create sprite string
var currspr = asset_get_index(mysprite + sprdir);
sprite_index = currspr;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Draw self
draw_self();

if obj_controller.showdebug1 {

    /// Draw ALL
    if path_exists(path){
        draw_set_alpha(0.3);
        draw_path(path,x,y,true);
        draw_set_alpha(1);
    }

    // DEBUG
    draw_set_colour(c_dkgray);
    
    draw_set_font(debugfont);
    draw_text(x-15, y-200, 
    //"I am: " + string(self.id) + "#" +
    "intention: " + string(intention) + "#" +
    //"carrying: " + string(carrying) + "#" +
    //"serving: " + string(customertoserve) + "#" +
    "goal: " + string(goal) + "#" +
    "goaltype: " + string(goaltype) + "#" +
    //"customertoserve: " + string(customertoserve) + "#" +    
    //"list size: " + string(ds_priority_size(listtoserve)) + "#" +
    //"listtoserve top: " + string(ds_priority_find_max(listtoserve)) + "#" +
    //"drink: " + string((carrying%1)*100) + "#" +
    //"wit: " + string(wit) + "#" +
    //"spd: " + string(spd) + "#" +
    //"level: " + string(level) + "#" +
    //"exp: " + string(experience) + "#" +
    "#"
    ); 
}

if state == scr_state_make_drink &amp;&amp; carrying &gt; 0.1 {
    draw_healthbar(x-16, y-50, x+14, y-47, (carrying%1)*100, c_gray, c_blue, c_blue, 0, true, false);
}


// Emotions

emox = x+20;
emoy = y-35;

switch (emotion) {
   case "nopath": 
   draw_sprite(spr_emotions, 5, emox, emoy); 
   break;
   case "noseat": 
   draw_sprite(spr_emotions, 6, emox, emoy); 
   break;
   case "leave": 
   draw_sprite(spr_emotions, 0, emox, emoy); 
   break;
   case "drinking": 
   draw_sprite(spr_emotions, 1, emox, emoy); 
   break;
   case "gotoseat": 
   draw_sprite(spr_emotions, 2, emox, emoy); 
   break;
   case "decidenext": 
   draw_sprite(spr_emotions, 3, emox, emoy); 
   break;
   case "toilet": 
   draw_sprite(spr_emotions, 4, emox, emoy); 
   break;
   case "waiting": 
   draw_sprite(spr_emotions, 7, emox, emoy); 
   break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
