<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// INIT

depth = -9999999;
button = "";
str = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect button/mouse collision

button = collision_point(mouse_x, mouse_y, obj_button, false, false);
buttonUI = collision_point(mouse_x, mouse_y, obj_button_UI, false, false);
tablesell = collision_point(mouse_x, mouse_y, obj_table, false, false);
chairsell = collision_point(mouse_x, mouse_y, obj_chair, false, false);
barsell = collision_point(mouse_x, mouse_y, obj_bar, false, false);
toiletsell = collision_point(mouse_x, mouse_y, obj_toilet, false, false);

// if any room except mainmenu
if room != rm_mainmenu {
    if button {
        str = button.tooltiptext;
    } else if buttonUI {
        str = buttonUI.tooltiptext;
    } else if obj_controller.selecteditem == "bulldozer" &amp;&amp; tablesell {
        str = "Sells for $" + string(tablesell.price/2);
    } else if obj_controller.selecteditem == "bulldozer" &amp;&amp; chairsell {
        str = "Sells for $" + string(chairsell.price/2);
    } else if obj_controller.selecteditem == "bulldozer" &amp;&amp; barsell {
        str = "Sells for $" + string(barsell.price/2);
    } else if obj_controller.selecteditem == "bulldozer" &amp;&amp; toiletsell {
        str = "Sells for $" + string(toiletsell.price/2);
    } else {
        tablesell = "";
        chairsell = "";
        barsell = "";
        toiletsell = "";
    }
} else {
    if buttonUI {
        str = buttonUI.tooltiptext;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw
if (room == rm_mainmenu &amp;&amp; buttonUI) || ((button || buttonUI || tablesell || chairsell || barsell || toiletsell) &amp;&amp; !point_in_rectangle(mouse_x, mouse_y, view_xview[1], view_yview[1], view_xview[1]+view_wview[1], view_yview[1]+view_hview[1]))
{
    if global.lowres {
        draw_set_font(UI_tooltip);
    } else {
        draw_set_font(UI_tooltip_big);        
    }
    var mousex = device_mouse_x_to_gui(0);
    var mousey = device_mouse_y_to_gui(0);
    strw = string_width(str);
    stry = string_height(str);
    var compensate = 0;
    
    // compensate if out of screen
    if mousex &gt; display_get_gui_width() - (30 + strw + 5) {
        compensate = (mousex + 30 + strw) - display_get_gui_width() + 5;
    }
    
    // box
    draw_set_colour(c_black);
    draw_set_alpha(.8);
    draw_roundrect_colour_ext(mousex + 19 - compensate, mousey + 20, mousex + 30 + strw - compensate, mousey + 30 + stry, 10, 10, c_black, c_black, false);
    
    // text
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_text(mousex + 25 - compensate, mousey + 25, str);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
