<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_hitbox_character</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_characters</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Customer INIT
event_inherited();

scr_get_random_name();

// set variables
iam = "customer";
client = false; // has the customer entered the bar?
emotion = "noone";
moving = false;
pause = false;
intention = "frontdoor";
potentialclient = false;
myseat = "";
mytoiletfront = "";
hasadrink = 0;
waitingfordrink = false;
haswaited = 0;
mytoiletfront = "";
ii = 0;
sprdir = "_r";
timerspritecounter = 0;
happiness = 0;
fired = false;
mypathposition = 0;

alarm[3] = room_speed/2; // update happiness

prevx = 0; // unstuck
prevy = 0; // unstuck
stuckcounter = 0;

// sprites vars
mainsprite = "spr_customer_normal_1";
hcut = "_hair_" + string(irandom_range(1, 3)); // haircuts number available
hairstyle = asset_get_index("spr_customer_normal_1" + sprdir + hcut);
myshirtcolor = make_color_rgb(irandom(255), irandom(255), irandom(255));
myhaircolor = make_color_rgb(irandom(255), irandom(255), irandom(255));
mypantscolor = make_color_rgb(irandom(255), irandom(255), irandom(255));
randskinmask = random_range(0, 1);
skinblend = make_color_rgb(198, 98, 41);
angryfacecolor = make_color_rgb(252, 71, 71);


var chancetobeclient = 80; // percentage of chance to be a potential client
mydrink = irandom_range(0, global.drinklistcount-1); // choose my drink in global drinklist

// NEEDS
thirst = irandom_range(0, 50); // when thirst is low, customer wants to drink
thirstceiling = irandom_range(60, 80);; // 0 never drinks, 100 always drinks, no matter the thirst score
thirstdecay = random_range(0.001,0.01);

wantstoleave = irandom_range(1, 20); // higher score than other intentions == leave

bladder = irandom_range(1, 100); // how full the bladder is when spawn
bladderceiling = irandom_range(1, 100); // how well customer can hold

// set BASE speed
var basespd = 3;
// random speed + or - 20% of basespeed
var randfactor = random_range(-20,20);
spd = basespd + ((basespd * randfactor)/100);
imgspd = spd/15;
image_speed = imgspd;

// set if potential client or not and start moving
if irandom(100) &lt; chancetobeclient {
    potentialclient = true;
}
if potentialclient {
    state = scr_move_to_frontdoor;
} else {
    state = scr_move_to_destroy;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize sprite construction
// Don't touch this, check alarm[2] event

alarm[2] = 1;

var spriteconst = mainsprite + sprdir;

skinback = asset_get_index(spriteconst);
hairstyle = asset_get_index(spriteconst + hcut);
pantssprite = asset_get_index(mainsprite + "_pants");
skinblendsprite = asset_get_index(spriteconst + "_skin");
shirtsprite = asset_get_index(spriteconst + "_shirt");
drinkcolor = choose(spr_customer_normal_1_r_drink_glass, spr_customer_normal_1_r_drink_glass1, spr_customer_normal_1_r_drink_glass2, spr_customer_normal_1_r_drink_glass3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// remove window view

if global.selected == self.id {
    global.selected = "";
    view_visible[1] = false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reputation + avgwaitingtime calculation
if client {
    var addreputation = 0; 
    var multiplier = 1; 
    
    // leave score
    var leavescore = 1-(wantstoleave/50); // between 1 and -1
    
    // waitscore
    if haswaited &gt; 10 {
        waitscore = -1;  // between 1 and -1
    } else {
        waitscore = 1 - (haswaited/5);
    }
    
    addreputation = (leavescore/2 + waitscore/2);
    
    // multiplier (curve the progression of reputation)
    
    // if global.rep is low
    if global.reputation &lt; 50 {
        if addreputation &lt; 0 { // if losing rep
            multiplier = global.reputation*2/100; // between 0 and 1
        } else { // if gaining rep (boost)
            multiplier = 1-((global.reputation-30)*2/100); // between 0 and 1            
        }
    } else { // if global rep is high
        if addreputation &gt;= 0 { // if gaining rep
            multiplier = 1-((global.reputation-50)*2/100);
        } else { // if losing rep (boost)
            multiplier = (global.reputation-30)*2/100; // between 0 and 1            
        }
    }
    
    // add to global
    addreputation *= multiplier;
    if fired {
        addreputation -= 5;
    }
    global.reputation += addreputation;
    
    
    
    // limits
    if global.reputation &gt; 100 {
        global.reputation = 99.99;
    } else if global.reputation &lt;= 3 {
        global.reputation = 3;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spawn time update

var spawnerr = instance_find(obj_spawner_r, 0);
var spawnerl = instance_find(obj_spawner_l, 0);

spawnerr.mintime = spawnerr.originalmintime/(global.reputation/100);
spawnerr.maxtime = spawnerr.originalmaxtime/(global.reputation/100);

spawnerl.mintime = spawnerl.originalmintime/(global.reputation/100);
spawnerl.maxtime = spawnerl.originalmaxtime/(global.reputation/100);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// update happiness

alarm[3] = room_speed/2;

if client {    
    // leave score
    var leavescore = 1-(wantstoleave/50); // between 1 and -1
    
    // waitscore
    if haswaited &gt; 10 {
        waitscore = -1;  // between 1 and -1
    } else {
        waitscore = 1 - (haswaited/5);
    }
    // update happiness 0 - 100
    happiness = ((leavescore/2 + waitscore/2)+1)*50;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprite change according to direction

if (direction &gt; 125 &amp;&amp; direction &lt; 270) {
    sprdir = "_r";
    image_xscale = -1;
} else if (direction &lt; 50 || direction &gt;= 270) {   
    sprdir = "_r"; 
    image_xscale = 1;
} else if (direction &gt;= 50 &amp;&amp; direction &lt;= 125) {
    sprdir = "_u"; 
} 

// sprite construction
var spriteconst = mainsprite + sprdir;

skinback = asset_get_index(spriteconst);
hairstyle = asset_get_index(spriteconst + hcut);
pantssprite = asset_get_index(mainsprite + "_pants");
skinblendsprite = asset_get_index(spriteconst + "_skin");
shirtsprite = asset_get_index(spriteconst + "_shirt");

// refresh rate
alarm[2] = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset emotion
emotion = "noone";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Decide next

scr_action_decide_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Natural states decay and needs

/// Execute script
script_execute(state);
event_inherited();

// THIRST
// decay + settings
thirst -= thirstdecay;
if thirst &lt; 0 {thirst = 0;}
if thirst &gt; 100 {thirst = 100;}

// BLADDER
if bladder &gt; 100 {bladder = 100;}

if wantstoleave &lt; 0 { wantstoleave = 0; }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// After reaching goal, decide next

// Round up positions of goal and current pos (buggy otherwise)
if instance_exists(goal) &amp;&amp; goal.activated {
    goalx = round(goal.x);
    goaly = round(goal.y);
    var posx = round(x);
    var posy = round(y);
    
    // if destination reached   
    if (posx == goalx+16 &amp;&amp; posy == goaly+16 &amp;&amp; moving &amp;&amp; alarm[0] == -1){
    
        path_end();
        moving = false;
        if goal == myseat { direction = myseat.angle; }
        if goal == mytoiletfront { direction = mytoiletfront.angle; }
        
        if goaltype == "obj_frontdoor" {
            scr_action_decide_next();
        } else {
            if collision_point(x, y, obj_toilet_front, false, true) {
                waitingtime = 1; // thinking time if toilet front
            } else {
                waitingtime = 50; // normal thinking time
            }
            scr_action_pause(waitingtime, ""); 
        }
    }
} else {
    if moving {
        path_end();
        // if the customer's seat disappeared, reset it
        if (goal == myseat) {
            if instance_exists(myseat) {
                myseat.occupied = 0;
            }
            myseat = "";
            scr_spots("update", obj_seat);
            scr_UI_log_write("Wait, did my seat just disappear?!"); 
        }
        scr_action_pause(50, "Path ended");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Emotions

emox = x+20;
emoy = y-35;
if potentialclient {
    switch (emotion) {
       case "nopath": 
       draw_sprite(spr_emotions, 5, emox, emoy); 
       break;
       case "noseat": 
       draw_sprite(spr_emotions, 6, emox, emoy); 
       break;
       case "leave": 
       draw_sprite(spr_emotions, 0, emox, emoy); 
       break;
       case "drinking": 
       draw_sprite(spr_emotions, 1, emox, emoy); 
       break;
       case "gotoseat": 
       draw_sprite(spr_emotions, 2, emox, emoy); 
       //draw_text(x, y+20, "Getting seat " + string(myseat));
       break;
       case "decidenext": 
       draw_sprite(spr_emotions, 3, emox, emoy); 
       break;
       case "toilet": 
       draw_sprite(spr_emotions, 4, emox, emoy); 
       break;
       case "waiting": 
       draw_sprite(spr_emotions, 7, emox, emoy); 
       break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw

// angry face color
if client &amp;&amp; wantstoleave &gt; 100 {
    skinblend = angryfacecolor;
    randskinmask = 1;
}

// sprite construction
if sprdir == "_r" {
    if state == scr_state_drink {
        // drink animation
        draw_sprite_ext(spr_shadow, image_index, x, y, image_xscale, 1, 0, c_white, 0.4); // shadow
        
        draw_sprite_ext(spr_customer_normal_1_r_shirt_drink, 0, x, y, image_xscale, 1, 0, myshirtcolor, 1); // shirt
        draw_sprite_ext(pantssprite, 0, x, y, image_xscale, 1, 0, mypantscolor, 1); // pants
        
        draw_sprite_ext(spr_customer_normal_1_r_drink_head, image_index, x+(4*image_xscale), y-2, image_xscale, 1, 15*image_xscale, c_white, 1); // skin back
        draw_sprite_ext(spr_customer_normal_1_r_drink_head, image_index, x+(4*image_xscale), y-2, image_xscale, 1, 15*image_xscale, skinblend, randskinmask); // skin blend
        draw_sprite_ext(hairstyle, image_index, x+(4*image_xscale), y-2, image_xscale, 1, 15*image_xscale, myhaircolor, 1); // hair style
        draw_sprite_ext(drinkcolor, image_index, x+(4*image_xscale), y-2, image_xscale, 1, 15*image_xscale, c_white, 1); // hands
        
    } else {    
        // walk animation
        draw_sprite_ext(spr_shadow, image_index, x, y, image_xscale, 1, 0, c_white, 0.4); // shadow
        
        draw_sprite_ext(shirtsprite, image_index, x, y, image_xscale, 1, 0, myshirtcolor, 1); // shirt
        draw_sprite_ext(pantssprite, image_index, x, y, image_xscale, 1, 0, mypantscolor, 1); // pants
        
        draw_sprite_ext(skinback, image_index, x, y, image_xscale, 1, 0, c_white, 1); // skin back
        draw_sprite_ext(skinblendsprite, image_index, x, y, image_xscale, 1, 0, skinblend, randskinmask); // skin blend        
        draw_sprite_ext(hairstyle, image_index, x, y, image_xscale, 1, 0, myhaircolor, 1); // hair style
    }
    
    
} else if sprdir == "_u" {
    // drink animation
    if state == scr_state_drink {
        draw_sprite_ext(spr_shadow, image_index, x, y, image_xscale, 1, 0, c_white, 0.4); // shadow
        draw_sprite_ext(spr_customer_normal_1_u_drink_head, image_index, x, y, image_xscale, 1, 0, c_white, 1); // skin back
        draw_sprite_ext(spr_customer_normal_1_r_shirt_drink, 0, x, y, image_xscale, 1, 0, myshirtcolor, 1); // shirt
        draw_sprite_ext(spr_customer_normal_1_u_drink_head, image_index, x, y, image_xscale, 1, 0, skinblend, randskinmask); // skin blend
        draw_sprite_ext(hairstyle, image_index, x, y, image_xscale, 1, 0, myhaircolor, 1); // hair style
        draw_sprite_ext(pantssprite, 0, x, y, image_xscale, 1, 0, mypantscolor, 1); // pants
    } else {
    // walk animation
        draw_sprite_ext(spr_shadow, image_index, x, y, image_xscale, 1, 0, c_white, 0.4); // shadow
        draw_sprite_ext(skinback, image_index, x, y, image_xscale, 1, 0, c_white, 1); // skin back
        draw_sprite_ext(shirtsprite, image_index, x, y, image_xscale, 1, 0, myshirtcolor, 1); // shirt
        draw_sprite_ext(skinblendsprite, image_index, x, y, image_xscale, 1, 0, skinblend, randskinmask); // skin blend
        draw_sprite_ext(hairstyle, image_index, x, y, image_xscale, 1, 0, myhaircolor, 1); // hair style
        draw_sprite_ext(pantssprite, image_index, x, y, image_xscale, 1, 0, mypantscolor, 1); // pants   
    }
}

if state == scr_state_waitfordrink || state == scr_state_waitforstall {
    draw_sprite(spr_wait_timer, timerspritecounter, x+5, y-45);
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug
if global.showdebug {
/// Draw ALL
if path_exists(path){
draw_set_alpha(0.3);
draw_path(path,x,y,true);
draw_set_alpha(1);
}


// DEBUG
    draw_set_colour(c_dkgray);
    
    draw_set_font(debugfont);
    draw_text(x-15, y-130, 
    "I am: " + string(self.id) + "#" +
    //"myseat: " + string(myseat) + "#" +
    //"mydestroyer: " + string(mydestroyer) + "#" +
    //"goal type: " + string(object_get_name(goal)) + "#" +
    //"goal id: " + string(goal) + "#" +
    //"hasadrink: " + string(hasadrink) + "#" +
    "state: " + string(script_get_name(state)) + "#" +
    "INT: " + string(intention) + "#" +
    //"Toilet: " + string(bladder-bladderceiling) + "#" +
    //"Leave: " + string(wantstoleave) + "#" +
    //"Drink: " + string(thirstceiling-thirst) + "#" +
    "Wait: " + string(haswaited) + "#" +
    "#");
    
    draw_set_colour(c_black);
    
    // States DEBUG
    if potentialclient {
        draw_healthbar(x+23, y-16, x+27, y+16, 100-thirst, c_white, c_aqua, c_aqua, 3, true, true);
        draw_healthbar(x+31, y-16, x+34, y+16, bladder, c_white, c_yellow, c_yellow, 3, true, true);
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
