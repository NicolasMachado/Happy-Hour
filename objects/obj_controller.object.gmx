<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_only_controller</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controller

instance_create(-1, -1, obj_fade_screen);

//view_zoom
viewzoom = 3 - global.lowres;
viewmaxzoom = 4 - global.lowres;
zoomspeed = .5;

// set cursor
cursor_sprite = spr_main_cursor;
window_set_cursor(cr_none);

//set pause
gamepause = false;

// get real random
randomize();

// is an item selected from menu?
selecteditem = "";
selectedmenu = "";

// is something selected
selected = "";

// item rotation
itemrot = 0;

// list of messages
messagesactivated = 1;
messageslist = ds_queue_create();
messages = "";
MESSAGE = -1;
if global.lowres {
    messagex = 95;
} else {
    messagex = 40;
}
messagey = 60;
scr_UI_create_messages_table();
alarm[1] = 2*room_speed; // send first messages

// launch avg waiting time timer
alarm[2] = 2*room_speed;

// update cooldown counter
cooldownrate = room_speed; // every x seconds
upcdcount = cooldownrate;

// medals related
nbserved = 0;

// show debug info
showdebug = 0;
showdebug1 = 0;
showdebug2 = 0;
showgrid = 0;

// counting seats globals
nbseats = 0;
nboccseats = 0;
nbfreeseats = 0;
unreachableseats = 0;

nbtoiletseats = 0;
nbocctseats = 0;
nbfreetseats = 0;
unreachabletoiletseats = 0;

nbbarspots = 0;
unreachablebarspots = 0;
nboccbarspots = 0;
nbfreebarspots = 0; 

spawner = instance_find(obj_spawner_r, 0);

placeable = false;
wealth = 1;

avgwaitingtime = 0;

leftnotoilet = 0;
leftwaitedtoolong = 0;
alarm[0] = 5*room_speed;

drinks = ""; // array containing all drinks
drinklistcount = 0; // total number of drinks
scr_UI_create_drinks_table();

items = ""; // array containing all items
itemlistcount = 0; // total number of items
scr_UI_create_items_table();

// Scale for the UI elements (updated everytime scr_UI_zoom is called)
zoom_scale_w = view_wview[0]/view_wport[0];
zoom_scale_h = view_hview[0]/view_hport[0];

// create log
for (i=0; i&lt;5; i++) {
    log[i] = "";
}

// order list 
orderslist = ds_list_create();

// GUI info
reputationbarsize = 140; // width
reputationbarheight = 28; // height
blackbarsize = 28; // height
posmedals = view_wport[0]/1.5; // medals x
posoptions = view_wport[0] - 20; // options x (right)
UIcolorlight = make_color_rgb(178, 194, 224);
UIcolormedium = make_color_rgb(145, 171, 202);
UIcolordark = make_color_rgb(119, 139, 177);
UIcolordarker = make_color_rgb(97, 119, 159);
starcolor = make_color_rgb(231, 231, 90);
buttonblendcolor = make_color_rgb(220, 220, 250);
buttonblendcolor2 = make_color_rgb(220, 220, 220);

// Location of target window
view1_x = view_wport[0] - 155;
view1_y = reputationbarheight + 12;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Current level setup


if room == rm_lv1 {
    currentlevel = "level_1";
} else if room == rm_lv2 {
    currentlevel = "level_2";
} else if room == rm_lv3 {
    currentlevel = "level_3";
} else if room == rm_lv4 {
    currentlevel = "level_4";
}

if currentlevel == "level_1" {
    tutorial = 1;
} else {
    tutorial = 0;
}

// medals
ini_open("conf.ini");
bronzemedal = ini_read_real(currentlevel, "bronze", 0);
silvermedal = ini_read_real(currentlevel, "silver", 0);
goldmedal = ini_read_real(currentlevel, "gold", 0);
ini_close();
alarm[4] = room_speed;

// Starting money
if currentlevel == "level_1" {
    money = 1500;
} else if currentlevel == "level_2" {
    money = 1300;
} else if currentlevel == "level_3" {
    money = 1200;
} else if currentlevel == "level_4" {
    money = 1000;
}

// Starting reputation
if currentlevel == "level_1" {
    reputation = 50;
} else if currentlevel == "level_2" {
    reputation = 50;
} else if currentlevel == "level_3" {
    reputation = 35;
} else if currentlevel == "level_4" {
    reputation = 25;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// create room instances

instance_create(-1000, -1000, obj_controller_main_menu);
instance_create(-1000, -1000, obj_node);
instance_create(-1000, -1000, obj_toavoid);
instance_create(-1000, -1000, obj_characters);
instance_create(-1000, -1000, obj_button);
instance_create(-1000, -1000, obj_pause);
instance_create(-1000, -1000, obj_button_interact_fire);
instance_create(-1000, -1000, obj_button_pause);
instance_create(-1000, -1000, obj_tooltip);
instance_create(-1000, -1000, obj_button_quit);
instance_create(-1000, -1000, obj_wealth_interact);
instance_create(-1000, -1000, obj_clock_interect);
instance_create(-1000, -1000, obj_button_togglemessages);
instance_create(-1000, -1000, obj_button_SFX);
instance_create(-1000, -1000, obj_button_music);
instance_create(-1000, -1000, obj_stars_interact);
instance_create(-1000, -1000, obj_silver_interact);
instance_create(-1000, -1000, obj_bronze_interact);
instance_create(-1000, -1000, obj_gold_interact);
instance_create(-1000, -1000, obj_listener);

// Left menu
instance_create(-1000, -1000, obj_button_bulldozer);
instance_create(-1000, -1000, obj_button_toilet);
instance_create(-1000, -1000, obj_button_chair);
instance_create(-1000, -1000, obj_button_table);
instance_create(-1000, -1000, obj_button_wall);
instance_create(-1000, -1000, obj_button_hire);
instance_create(-1000, -1000, obj_button_bar);

// ************** LEVEL 1 FURNITURE *********************
if obj_controller.currentlevel == "level_1" {

    instance_create(-1000, -1000, obj_table_1x1_button);
    instance_create(-1000, -1000, obj_simple_chair_button);
    instance_create(-1000, -1000, obj_simple_bar_button);
    instance_create(-1000, -1000, obj_simple_toilet_button);
}

// ************** LEVEL 2 FURNITURE *********************
if obj_controller.currentlevel == "level_2" {
    // tables
    instance_create(-1000, -1000, obj_table_1x1_button);
    with (instance_create(-1000, -1000, obj_table_2x2_button)) { buttonum = 1; }
    with (instance_create(-1000, -1000, obj_table_2x2_1_button)) { buttonum = 2; }
    with (instance_create(-1000, -1000, obj_table_3x2_button)) { buttonum = 3; }
    with (instance_create(-1000, -1000, obj_table_3x2_1_button)) { buttonum = 4; }
    
    // chairs
    instance_create(-1000, -1000, obj_simple_chair_button);
    instance_create(-1000, -1000, obj_chair_1_button);
    
    // toilet
    instance_create(-1000, -1000, obj_simple_toilet_button);
    instance_create(-1000, -1000, obj_toilet_1_button);
    
    // counters
    instance_create(-1000, -1000, obj_simple_bar_button);
    instance_create(-1000, -1000, obj_bar_2_button);  
}

// ************** LEVEL 3 FURNITURE *********************
if obj_controller.currentlevel == "level_3" {
    // tables
    instance_create(-1000, -1000, obj_table_1x1_button);
    instance_create(-1000, -1000, obj_table_1x1_1_button);
    instance_create(-1000, -1000, obj_table_2x2_button);
    instance_create(-1000, -1000, obj_table_2x2_1_button);
    instance_create(-1000, -1000, obj_table_2x2_2_button);
    instance_create(-1000, -1000, obj_table_3x2_button);
    instance_create(-1000, -1000, obj_table_3x2_1_button);
    
    // chairs
    instance_create(-1000, -1000, obj_simple_chair_button);
    instance_create(-1000, -1000, obj_chair_1_button);
    instance_create(-1000, -1000, obj_chair_2_button);
    
    // toilet
    instance_create(-1000, -1000, obj_simple_toilet_button);
    instance_create(-1000, -1000, obj_toilet_1_button);
    instance_create(-1000, -1000, obj_toilet_2_button);
    
    // counters
    instance_create(-1000, -1000, obj_simple_bar_button);
    instance_create(-1000, -1000, obj_bar_2_button);
    instance_create(-1000, -1000, obj_bar_3_button);    
}

// ************** LEVEL 4 FURNITURE *********************
if obj_controller.currentlevel == "level_4" {
    // tables
    instance_create(-1000, -1000, obj_table_1x1_button);
    instance_create(-1000, -1000, obj_table_1x1_1_button);
    instance_create(-1000, -1000, obj_table_2x2_button);
    instance_create(-1000, -1000, obj_table_2x2_1_button);
    instance_create(-1000, -1000, obj_table_2x2_2_button);
    instance_create(-1000, -1000, obj_table_3x2_button);
    instance_create(-1000, -1000, obj_table_3x2_1_button);
    instance_create(-1000, -1000, obj_table_3x2_2_button);
    
    // chairs
    instance_create(-1000, -1000, obj_simple_chair_button);
    instance_create(-1000, -1000, obj_chair_1_button);
    instance_create(-1000, -1000, obj_chair_2_button);
    
    // toilet
    instance_create(-1000, -1000, obj_simple_toilet_button);
    instance_create(-1000, -1000, obj_toilet_1_button);
    instance_create(-1000, -1000, obj_toilet_2_button);
    
    // counters
    instance_create(-1000, -1000, obj_simple_bar_button);
    instance_create(-1000, -1000, obj_bar_2_button);
    instance_create(-1000, -1000, obj_bar_3_button);    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check medals

//******************* LEVEL 1 *******************
if currentlevel == "level_1" {

    if bronzemedal == 0 {
        // conditions for bronze
        if obj_controller.nbserved &gt;= obj_bronze_interact.goalserve
        &amp;&amp; money &gt;= obj_bronze_interact.balance         
        {
            scr_UI_unlock_medal("bronze");
        }
    }
    
    if silvermedal == 0 {
        // conditions for silver
        if obj_controller.nbserved &gt; obj_silver_interact.goalserve
        &amp;&amp; money &gt;= obj_silver_interact.balance
        {
            scr_UI_unlock_medal("silver");
        }
    }
    
    if goldmedal == 0 {
        // conditions for gold
        if obj_controller.nbserved &gt; obj_gold_interact.goalserve
        &amp;&amp; money &gt;= obj_gold_interact.balance
        {
            scr_UI_unlock_medal("gold");
        }
    }
}

//******************* LEVEL 2 *******************
if currentlevel == "level_2" {

    if bronzemedal == 0 {
        // conditions for bronze
        if obj_controller.nbserved &gt;= obj_bronze_interact.goalserve &amp;&amp;
        money &gt; obj_bronze_interact.balance &amp;&amp;
        reputation/20 &gt; obj_bronze_interact.reputation
        {
            scr_UI_unlock_medal("bronze");
        }
    }
    
    if silvermedal == 0 {
        // conditions for silver
        if obj_controller.nbserved &gt;= obj_silver_interact.goalserve &amp;&amp;
        money &gt; obj_silver_interact.balance &amp;&amp;
        reputation/20 &gt; obj_silver_interact.reputation
        {
            scr_UI_unlock_medal("silver");
        }
    }
    
    if goldmedal == 0 {
        // conditions for gold
        if obj_controller.nbserved &gt;= obj_gold_interact.goalserve &amp;&amp;
        money &gt; obj_gold_interact.balance &amp;&amp;
        reputation/20 &gt; obj_gold_interact.reputation
        {
            scr_UI_unlock_medal("gold");
        }
    }
}

//******************* LEVEL 3 *******************
if currentlevel == "level_3" {

    if bronzemedal == 0 {
        // conditions for bronze
        if money &gt; obj_bronze_interact.balance &amp;&amp;
        reputation/20 &gt; obj_bronze_interact.reputation &amp;&amp;
        wealth*100 &gt; obj_bronze_interact.wealth &amp;&amp;
        avgwaitingtime &lt; obj_bronze_interact.waittime  
        {
            scr_UI_unlock_medal("bronze");
        }
    }
    
    if silvermedal == 0 {
        // conditions for silver
        if money &gt; obj_silver_interact.balance &amp;&amp;
        reputation/20 &gt; obj_silver_interact.reputation &amp;&amp;
        wealth*100 &gt; obj_silver_interact.wealth &amp;&amp;
        avgwaitingtime &lt; obj_silver_interact.waittime 
        {
            scr_UI_unlock_medal("silver");
        }
    }
    
    if goldmedal == 0 {
        // conditions for gold
        if money &gt; obj_gold_interact.balance &amp;&amp;
        reputation/20 &gt; obj_gold_interact.reputation &amp;&amp;
        wealth*100 &gt; obj_gold_interact.wealth &amp;&amp;
        avgwaitingtime &lt; obj_gold_interact.waittime 
        {
            scr_UI_unlock_medal("gold");
        }
    }
}

//******************* LEVEL 4 *******************
if currentlevel == "level_4" {

    if bronzemedal == 0 {
        // conditions for bronze
        if money &gt; obj_bronze_interact.balance &amp;&amp;
        reputation/20 &gt; obj_bronze_interact.reputation &amp;&amp;
        wealth*100 &gt; obj_bronze_interact.wealth &amp;&amp;
        avgwaitingtime &lt; obj_bronze_interact.waittime &amp;&amp;
        nbseats &gt;= obj_bronze_interact.nbseats
        {
            scr_UI_unlock_medal("bronze");
        }
    }
    
    if silvermedal == 0 {
        // conditions for silver
        if money &gt; obj_silver_interact.balance &amp;&amp;
        reputation/20 &gt; obj_silver_interact.reputation &amp;&amp;
        wealth*100 &gt; obj_silver_interact.wealth &amp;&amp;
        avgwaitingtime &lt; obj_silver_interact.waittime &amp;&amp;
        nbseats &gt;= obj_silver_interact.nbseats
        {
            scr_UI_unlock_medal("silver");
        }
    }
    
    if goldmedal == 0 {
        // conditions for gold
        if money &gt; obj_gold_interact.balance &amp;&amp;
        reputation/20 &gt; obj_gold_interact.reputation &amp;&amp;
        wealth*100 &gt; obj_gold_interact.wealth &amp;&amp;
        avgwaitingtime &lt; obj_gold_interact.waittime &amp;&amp;
        nbseats &gt;= obj_gold_interact.nbseats
        {
            scr_UI_unlock_medal("gold");
        }
    }
}


// reset alarm
alarm[4] = room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// calculate wealth

scr_wealth_calculation();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// average waiting time calculation
alarm[2] = 10;

var avgtime = 0;

var nbcust = instance_number(obj_customer);
var divider = 0;

// get avgtime from all active customer
for (i=0; i&lt;nbcust; i++) {
    cust = instance_find(obj_customer, i);
    if cust.haswaited &gt; 0 {
        avgtime += cust.haswaited;
        divider++;
    }
}
// calculate avg time global
if avgtime != 0 {
    avgwaitingtime = avgtime / divider;
} else {
    avgwaitingtime = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// set first message boxes

if tutorial {
    scr_UI_message_box(0);
    scr_UI_message_box(2);
    scr_UI_message_box(15);
    scr_UI_message_box(5);
    scr_UI_message_box(6);
    scr_UI_message_box(7);
    scr_UI_message_box(8);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// -1 to globals of customers leaving alert

// left because no toilet
leftnotoilet--;

if leftnotoilet &lt; 0 {
    leftnotoilet = 0;
} else if leftnotoilet &gt; 10 {
    scr_UI_message_box(13);
    leftnotoilet = 0;
}

// left because waited for too long
leftwaitedtoolong--;

if leftwaitedtoolong &lt; 0 {
    leftwaitedtoolong = 0;
} else if leftwaitedtoolong &gt; 10 {
    scr_UI_message_box(14);
    leftwaitedtoolong = 0;
}


alarm[0] = 8*room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Viewport movement

// view movement
var camspd = 10;

if keyboard_check(vk_right) {
    view_xview[0] += camspd;
}
if keyboard_check(vk_left) {
    view_xview[0] -= camspd;
}
if keyboard_check(vk_up) {
    view_yview[0] -= camspd;
}
if keyboard_check(vk_down) {
    view_yview[0] += camspd;
}

// zoom
if selecteditem == "" {
    if mouse_wheel_down() {   
        if obj_display_manager.idealwidth/(viewzoom-zoomspeed) &lt;= room_width - 128 {
            var prew = view_wview;
            var preh = view_hview;
            
            viewzoom -= zoomspeed;
            viewzoom = clamp(viewzoom, 1, viewmaxzoom);
            view_wview = obj_display_manager.idealwidth/viewzoom;
            view_hview = obj_display_manager.idealheight/viewzoom;
            zoom_scale_w = obj_display_manager.idealwidth/ viewzoom / obj_display_manager.idealwidth;
    
            //offset
            view_xview[0] += (prew - view_wview)/2;
            view_yview[0] += (preh - view_hview)/2;
        }
    }
    
    if mouse_wheel_up() {
        var prew = view_wview;
        var preh = view_hview;
        
        viewzoom += zoomspeed;
        viewzoom = clamp(viewzoom, 1, viewmaxzoom);
        view_wview = obj_display_manager.idealwidth/viewzoom;
        view_hview = obj_display_manager.idealheight/viewzoom;
        zoom_scale_w = obj_display_manager.idealwidth / viewzoom / obj_display_manager.idealwidth;

        //offset
        view_xview[0] += (prew - view_wview)/2;
        view_yview[0] += (preh - view_hview)/2;
    }
}


// stick view inside roomm
if view_xview &lt; 64 {view_xview = 64;}
if view_yview &lt; 0 {view_yview = 0;}
if view_xview &gt; room_width-view_wview[0]-64 {view_xview = room_width-view_wview[0]-64;}
if view_yview &gt; room_height-view_hview[0] {view_yview = room_height-view_hview[0];}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global key presses

switch (keyboard_key)
{
    /*
    case vk_f1: selecteditem = obj_wall; break;
    case vk_f2: selecteditem = ""; break; //
    case vk_f3: selecteditem = "bulldozer"; break;
    case vk_f4: selecteditem = ""; break;
    case vk_f5: selecteditem = obj_chair_simple; break;
    case vk_f6: selecteditem = obj_toilet_spot; break;
    case vk_f7: selecteditem = obj_server; break;
    case vk_f8: selecteditem = items[0,0]; break;
    */
    
    case vk_escape: selecteditem = ""; 
    selectedmenu = "";
    if selected != "" {
        selected = ""; 
        view_visible[1] = false;
    }
    break;
}

// ****************** DEBUG ************************

if keyboard_check_pressed(vk_f12) {
    showdebug = 1-showdebug;
}

if keyboard_check_pressed(vk_f11) {
    showdebug1 = 1-showdebug1;
}

if keyboard_check_pressed(vk_f10) {
    showdebug2 = 1-showdebug2;
}

if keyboard_check_pressed(vk_f9) {
    showgrid = 1-showgrid;
}

if keyboard_check_pressed(vk_numpad0) {
    money = get_integer("Money", 0);
}

if keyboard_check_pressed(vk_numpad1) {
    reputation = get_integer("reputation (0-100)", 0);
}

if keyboard_check_pressed(vk_numpad2) {
    wealth = get_integer("wealth (100-500)", 0);
}

if keyboard_check_pressed(vk_numpad3) {
    nbserved = get_integer("nbserved", 0);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Item rotation degrees
if (selecteditem != "" &amp;&amp; selecteditem != "bulldozer") {

    var rot = itemrot;
    if mouse_wheel_up() {
        audio_play_sound(snd_woosh, 1, false);
        rot += 90;
        if rot == 360 {
            rot = 0;
        }
        itemrot = rot;
    }
    
    if mouse_wheel_down() {
        audio_play_sound(snd_woosh, 1, false);
        rot -= 90;
        if rot &lt; 0 {
            rot = 270;
        }
        itemrot = rot;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// view[1] follow selected item

if selected != "" {
    view_xview[1] = selected.x - (view_wview[1]/2);
    view_yview[1] = selected.y - (view_hview[1]/2) - 15;
    
    view_xport[1] = view1_x;
    view_yport[1] = view1_y;
} else {
    view_xview[1] = -1000;
    view_yview[1] = -1000;   
}


if view_wview &gt;= room_width - 150 {
    view_wview = 720;
    view_hview = 540;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// messages cooldown

// update cooldown counter
upcdcount -= 1;

if upcdcount &lt; 1 { // every x seconds
    // run through cdmessage sarray
    for (i = 0; i &lt; array_length_1d(cdmessages); i++) {
    
        if cdmessages[i] &gt; 0 &amp;&amp; messages[4,i] != -1 &amp;&amp; messages[3,i] { 
            // remove x seconds
            cdmessages[i] -= cooldownrate;
            
        } else { // or reset it
        
            cdmessages[i] = messages[4,i];
            
            if messages[4,i] != -1 { // if the message is cooldown type
                messages[3,i] = false; // mark as not read
            }
        }        
    }    
    upcdcount = cooldownrate;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create instance under mouse

if (selecteditem == "" &amp;&amp; !position_meeting(mouse_x, mouse_y, obj_button)) {
    selectedmenu = "";
    exit;   
}

if !position_meeting(mouse_x, mouse_y, obj_button) {
    if (selecteditem == "bulldozer") {
        scr_UI_bulldoze_under_mouse(selecteditem);
    } else {
        var parent = object_get_parent(selecteditem);
        switch (parent)
        {
            case obj_table: scr_UI_create_solid_under_mouse(selecteditem); break;
            case obj_chair: scr_UI_create_ghost_under_mouse(selecteditem); break;
            case obj_bar: scr_UI_create_solid_under_mouse(selecteditem); break;
            case obj_toilet: scr_UI_create_solid_under_mouse(selecteditem); break;
        }
        switch (selecteditem)
        {
            case obj_wall: scr_UI_create_wall_under_mouse(selecteditem); break;
            case obj_server: scr_UI_create_ghost_under_mouse(selecteditem); break;
            case obj_server_bar_spot: scr_UI_create_ghost_under_mouse(selecteditem); break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select with left click

if (selecteditem == "" &amp;&amp; view_current == 0 &amp;&amp; !collision_point(mouse_x, mouse_y, obj_button, false, true)) {
    var inst = collision_rectangle(mouse_x-3, mouse_y-3,mouse_x+3, mouse_y+20, obj_characters, true, true);
    if (inst &amp;&amp; (object_get_name(inst.object_index) == "obj_customer" || object_get_name(inst.object_index) == "obj_server")) {
        selected = inst;
        scr_UI_log_write("You have selected instance " + object_get_name(inst.object_index) + " - " + string(inst));
        view_visible[1] = true;
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// unselect

selecteditem = "";
selected = "";
view_visible[1] = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy

ds_list_destroy(orderslist);
ds_queue_destroy(messageslist);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw selected instance under mouse

if (selecteditem == "") {exit};

var parent = object_get_parent(selecteditem);

if parent != -1 &amp;&amp; parent != -100 &amp;&amp; selecteditem != "bulldozer" {
    switch (parent)
    {
        case obj_table: scr_draw_table_under_mouse(); break;
        case obj_chair: scr_draw_chair_under_mouse(); break;
        case obj_bar: scr_draw_bar_under_mouse(); break;
        case obj_toilet: scr_draw_toilet_under_mouse(); break;
        case obj_characters: scr_draw_server_under_mouse(); break;
        default: scr_draw_selected_under_mouse();
    }
} else {
    switch (selecteditem)
    {
        case "bulldozer": scr_draw_bulldozer_under_mouse(); break;
        default: scr_draw_selected_under_mouse();
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// GUI

// ************** TOP BAR *****************
// Black bar on top
draw_set_alpha(1);
draw_rectangle_colour(0, 0, view_wport[0], (blackbarsize+8), UIcolordark, UIcolordark, UIcolordark, UIcolordark, false);
draw_rectangle_colour(0, 0, view_wport[0], blackbarsize+4, UIcolormedium, UIcolormedium, UIcolormedium, UIcolormedium, false);
draw_rectangle_colour(0, 0, view_wport[0], blackbarsize, UIcolorlight, UIcolorlight, UIcolorlight, UIcolorlight, false);
draw_set_alpha(1);

// Money display
draw_set_font(UI_balance);
if money &gt; 0 {draw_set_colour(UIcolordarker);} else {draw_set_colour(c_red);}
draw_set_valign(fa_middle);
draw_text(5, (blackbarsize/2), "$" + string(money));
draw_set_valign(fa_top);

// Stars
draw_healthbar(view_wport[0]/2-(reputationbarsize/2), (blackbarsize/2) - (reputationbarheight/2)-1, view_wport[0]/2+(reputationbarsize/2)-1, (blackbarsize/2) + (reputationbarheight/2)-1, reputation, UIcolordark, starcolor, starcolor, 0, true, false);
draw_sprite(spr_stars, 0, view_wport[0]/2, (blackbarsize/2));

// chrono
draw_healthbar(view_wport[0]/4 - 12, 2, view_wport[0]/4 + 12, blackbarsize-2, avgwaitingtime*10, UIcolordark, starcolor, c_orange, 3, true, false);
draw_sprite(spr_chrono, 0, view_wport[0]/4, (blackbarsize/2)+1);

// wealth
draw_healthbar(view_wport[0]/2.8 - 12, 2, view_wport[0]/2.8 + 12, blackbarsize-2, (wealth-1)*25, UIcolordark, starcolor, starcolor, 3, true, false);
draw_sprite(spr_wealth, 0, view_wport[0]/2.8, (blackbarsize/2)+1);

// medals
draw_sprite(spr_medals, bronzemedal, posmedals, (blackbarsize/2)+1);
draw_sprite(spr_medals, silvermedal, posmedals + 30, (blackbarsize/2)+1);
draw_sprite(spr_medals, goldmedal, posmedals + 60, (blackbarsize/2)+1);

// ************** OPTIONS *****************
// quit to main menu button
draw_sprite(spr_quit_to_main, 0, posoptions, (blackbarsize/2)+1);

// SFX button on/off
draw_sprite(spr_SFX_button, global.SFX, posoptions-30, (blackbarsize/2)+1);

// music button on/off
draw_sprite(spr_music_button, global.music, posoptions-30*2, (blackbarsize/2)+1);

// messages button on/off
draw_sprite(spr_messages_button, messagesactivated, posoptions-30*3, (blackbarsize/2)+1);

// pause/unpause button
if gamepause {
    draw_sprite(spr_pause_button, 0, posoptions-30*4, (blackbarsize/2)+1);
} else {
    draw_sprite(spr_unpause_button, 0, posoptions-30*4, (blackbarsize/2)+1);
}

// reset font
draw_set_colour(c_black);
draw_set_font(debugfont);


// ************** TARGET WINDOW *****************
if selected != "" {
    // outline rectangle
    draw_rectangle(view1_x-1, view1_y-1, view1_x+149, view1_y+149, true);  
    draw_rectangle(view1_x, view1_y, view1_x+150, view1_y+150, true);  
    
    // background filler rectangle for name
    draw_set_alpha(0.4);
    draw_rectangle_colour(view1_x, view1_y+125, view1_x+150, view1_y+150, c_black, c_black, c_black, c_black, false); 
    draw_set_alpha(1);
    
    // text name + laste name
    draw_set_font(UI);
    draw_set_colour(c_white);
    draw_set_halign(fa_center);
    if selected.iam == "customer" {
        draw_text(view1_x+75, view1_y+130, selected.name + " " + selected.lastname);
    } else {
        draw_text(view1_x+75, view1_y+130, selected.name + " (Lv " +  string(selected.level) + ")");
    }
    draw_set_halign(fa_left);
    draw_set_colour(c_black);
    draw_set_font(debugfont);
    
    // bars
    if selected.iam == "customer" {
        
        // happiness bar
        draw_set_alpha(0.6);
        draw_roundrect_colour(view1_x, view1_y+160, view1_x+110, view1_y+190, c_black, c_black, false); 
        draw_set_alpha(1);
        draw_healthbar(view1_x+28, view1_y+170, view1_x+82, view1_y+180, selected.happiness, c_black, c_red, c_yellow, 0, true, true);
        draw_sprite(spr_smileys, 1, view1_x+5, view1_y+168);
        draw_sprite(spr_smileys, 0, view1_x+90, view1_y+168);
        
    } else if selected.iam == "server" &amp;&amp; !selected.fired {    
        // background filler rectangle for options buttons
        draw_set_alpha(0.6);
        draw_roundrect_colour(view1_x, view1_y+160, view1_x+110, view1_y+213, c_black, c_black, false); 
        draw_set_alpha(1);
        
        // wit and speed bars
        draw_healthbar(view1_x+40, view1_y+171, view1_x+100, view1_y+173, (selected.wit-0.8)*97, c_black, c_yellow, c_yellow, 0, true, false);
        draw_healthbar(view1_x+40, view1_y+186, view1_x+100, view1_y+188, (selected.spd-2.4)*32, c_black, c_yellow, c_yellow, 0, true, false);
        
        // text
        draw_set_font(UI_tooltip);
        draw_set_colour(c_white);
        draw_text(view1_x+10, view1_y+165, "WIT");
        draw_text(view1_x+10, view1_y+180, "SPD");
        draw_text(view1_x+10, view1_y+195, "SLR");
        draw_set_halign(fa_right);
        draw_text(view1_x+100, view1_y+195, "$" + string(selected.salary));
        draw_set_halign(fa_left);
        draw_set_colour(c_black);
        draw_set_font(debugfont);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// DEBUG
if showdebug2 {

    draw_text(64, 32, 
    //"Customers on screen = " + string(instance_number(obj_customer)) + "#" +
    "selected item = " + string(selecteditem) + "#" +
    "obj = " + string(instance_place(mouse_x, mouse_y, all)) + "#" +
    "rot = " + string(itemrot) + "#" +
    //"nb seats = " + string(nbseats) + "#" +
    //"nb occ seats = " + string(nboccseats) + "#" +
    "placeable = " + string(placeable)+ "#" +
    //"nb free seats = " + string(nbfreeseats) + "#" + "#" +
    //"nb toilet seats = " + string(nbtoiletseats) + "#" +
    //"nb toilet occ seats = " + string(nbocctseats) + "#" +
    //"nb toilet free seats = " + string(nbfreetseats) + "#" + "#" +
    //"Unreachable seats! = " + string(unreachableseats) + "#" +
    //"Unreachable toilet seats = " + string(unreachabletoiletseats) + "#" +
    //"nb bar spots = " + string(nbbarspots) + "#" +
   // "nb unreachable bar spots = " + string(unreachablebarspots) + "#" +
    //"nb occupied spots = " + string(nboccbarspots) + "#" +
    //"nb free bar spots = " + string(nbfreebarspots) + "#" +
    //"nb free bar spots = " + string(nbfreebarspots) + "#" +
    "selected menu = " + string(selectedmenu) + "#" +
    "avg waiting time = " + string(avgwaitingtime) + "#" +
    //"sprx = " + string(obj_controller.sprx) + "#" +
    //"spry = " + string(obj_controller.spry) + "#" +
    "SCALE = " + string(SCALE) + "#" +
    "Congrats = " + string(cdmessages[9]) + "#" +
    "Stuck = " + string(cdmessages[12]) + "#" +
    "left no toilet = " + string(leftnotoilet) + "#" +
    "left wait too long = " + string(leftwaitedtoolong) + "#" +
    "#"
    );
    
    // LOG
    draw_set_colour(c_maroon);
    draw_text(32, 650, 
    string(log[4]) + "#" +
    string(log[3]) + "#" +
    string(log[2]) + "#" +
    string(log[1]) + "#" +
    string(log[0]));
    draw_set_colour(c_black);

    // Orders list
    for (i=0; i &lt; ds_list_size(obj_controller.orderslist)*20; i+=20){
        draw_text(700, 40+i, string(i/20) + " = " + string(obj_controller.orderslist[| i/20]));
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
